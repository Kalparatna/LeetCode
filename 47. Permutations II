" 

Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 " 

CODE 

class Solution(object):
    def permuteUnique(self, nums):
        def backtrack(current):
            
            if len(current) == numlen:
                if current not in result:
                    result.append(current[:])
                    return
           
            for i in range(numlen):
                if not used[i]:
                    # Choose
                    used[i] = True
                    current.append(nums[i])
                    
                  
                    backtrack(current)
                    
                    
                    used[i] = False
                    current.pop()
        
        numlen = len(nums)

        result = []
        used = [False] * numlen
        backtrack([])
        return result
      
