'''
The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]
 
'''

------------------------------------------------------------------------------------------

class Solution(object):
    def solveNQueens(self, n):
        def is_valid(board, rows , col):
            for row in range(rows):
                if board[row][col] == "Q":
                    return False
                if col -(rows - row) >= 0 and board[row][col- (rows-row)] == "Q":
                    return False
                
                if col + (rows - row) < n and board[row][col + (rows -row)] == "Q":
                    return False

            return True

        def backtrack(board , rows):
            if rows == n :
                result.append(["".join(rows) for rows in board])
                return 

            for col in range(n):
                if is_valid(board, rows, col):
                    board[rows][col] = "Q"
                    backtrack(board, rows + 1)
                    board[rows][col] = "."
    
        board = [['.' for _ in range(n)] for _ in range(n)]
        result = []

        backtrack(board, 0)
        return result

                


        
