'''
Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]

'''
----------------------------------------------------------------------------------------------------------
class Solution(object):
    def permute(self, nums):
        def backtrack(current):
            # Base case: if current permutation is of the same length as nums, add to result
            if len(current) == numlen:
                result.append(current[:])
                return
                
            # Recursive case: try all numbers not yet used in current permutation
            for i in range(numlen):
                if not used[i]:
                    # Choose
                    used[i] = True
                    current.append(nums[i])
                    
                    # Explore
                    backtrack(current)
                    
                    # Unchoose (backtrack)
                    used[i] = False
                    current.pop()
        
        numlen = len(nums)
        result = []
        used = [False] * numlen
        backtrack([])
        return result
